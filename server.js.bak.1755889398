import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const app = express();
app.use(express.json({ limit: "5mb" }));

// CORS для Retell UI
app.use((req, res, next) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Headers", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
  if (req.method === "OPTIONS") return res.sendStatus(204);
  next();
});

const TOKEN = process.env.MCP_TOKEN || "";
function checkToken(req, res, next) {
  if (!TOKEN) return next();
  const t = req.get("x-mcp-token") || req.query.token;
  if (t !== TOKEN) return res.status(401).json({ ok: false, error: "unauthorized" });
  next();
}

// --- helpers ---
function readManifest() {
  const p = path.join(__dirname, "manifest.json");
  return JSON.parse(fs.readFileSync(p, "utf8"));
}
function sendManifest(res) {
  res.type("application/json");
  res.sendFile(path.join(__dirname, "manifest.json"));
}

// Health (оба пути)
app.get("/health", (_req, res) => res.json({ ok: true }));
app.get("/mcp/health", (_req, res) => res.json({ ok: true }));

// Manifest (оба пути)
app.get("/manifest.json", (_req, res) => sendManifest(res));
app.get("/mcp/manifest.json", (_req, res) => sendManifest(res));

// Tools (оба пути) — это ждёт Retell при добавлении MCP Tool
app.get("/tools", (_req, res) => {
  try { res.json(readManifest().tools || []); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});
app.get("/mcp/tools", (_req, res) => {
  try { res.json(readManifest().tools || []); }
  catch (e) { res.status(500).json({ ok:false, error:String(e) }); }
});

// Action (оба пути) — пока эхо
app.post("/action", checkToken, (req, res) => {
  res.json({ ok: true, received_at: new Date().toISOString(), payload: req.body });
});
app.post("/mcp/action", checkToken, (req, res) => {
  res.json({ ok: true, received_at: new Date().toISOString(), payload: req.body });
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`MCP up on ${port}`));
